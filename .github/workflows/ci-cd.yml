name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger on push to 'main' branch
#  pull_request:
#    branches:
#      - main  # Trigger on pull requests targeting 'main' branch

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      api_image: ${{ steps.build_api.outputs.api_image }}
      react_image: ${{ steps.build_react.outputs.react_image }}
    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to Azure using Service Principal credentials
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Create .env file for Docker build
      - name: Create .env file
        run: |
          echo "NEW_RELIC_LICENSE_KEY=${{ secrets.NEW_RELIC_LICENSE_KEY }}" >> .env
          echo "SPLIT_API_KEY=${{ secrets.SPLIT_API_KEY }}" >> .env
          echo "API_URL=https://dev-api.energizelms.com" >> .env
          echo "CLIENT_URL=https://dev-app.energizelms.com" >> .env
          echo "STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}" >> .env
          echo "STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "VITE_SPLIT_API_KEY=${{ secrets.SPLIT_API_KEY }}" >> .env
          echo "VITE_SOCKET_URL=https://dev-api.energizelms.com" >> .env
          echo "VITE_API_URL=https://dev-api.energizelms.com" >> .env
          echo "VITE_CLIENT_URL=https://dev-app.energizelms.com" >> .env
          echo "VITE_STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}" >> .env
          echo "VITE_STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}" >> .env
          echo "AI_AWS_AGENTID=${{ secrets.AI_AWS_AGENTID }}" >> .env
          echo "AI_AWS_AGENTALIASID=${{ secrets.AI_AWS_AGENTALIASID }}" >> .env
          echo "AI_AWS_ACCESSKEYID=${{ secrets.AI_AWS_ACCESSKEYID }}" >> .env
          echo "AI_AWS_SECRETACCESSKEY=${{ secrets.AI_AWS_SECRETACCESSKEY }}" >> .env
          echo "AI_AZURE_APIKEY=${{ secrets.AI_AZURE_APIKEY }}" >> .env
          echo "AI_AZURE_ENDPOINT=${{ secrets.AI_AZURE_ENDPOINT }}" >> .env
          echo "AI_AZURE_MODEL=${{ secrets.AI_AZURE_MODEL }}" >> .env
          echo "AI_AZURE_MODEL_VERSION=${{ secrets.AI_AZURE_MODEL_VERSION }}" >> .env

      # Copy .env file to Node.js API directory
      - name: Copy .env to Node.js API directory
        run: |
          cp .env ./my-nodejs-api/.env

      # Copy .env file to React App directory
      - name: Copy .env to React App directory
        run: |
          cp .env ./my-react-app/.env

      # Build Docker image for the API service
      - name: Build Docker image for API
        id: build_api
        run: |
          docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/my-api:${{ github.sha }} ./my-nodejs-api
          echo "api_image=${{ secrets.ACR_NAME }}.azurecr.io/my-api:${{ github.sha }}" >> "$GITHUB_OUTPUT"
      
      # Build Docker image for the React service
      - name: Build Docker image for React App
        id: build_react
        run: |
          docker build \
            -t ${{ secrets.ACR_NAME }}.azurecr.io/my-react-app:${{ github.sha }} ./my-react-app
          echo "react_image=${{ secrets.ACR_NAME }}.azurecr.io/my-react-app:${{ github.sha }}" >> "$GITHUB_OUTPUT"

      # Log in to Azure Container Registry (ACR)
      - name: Log in to Azure Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.ACR_NAME }}.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      # Push Docker images to ACR
      - name: Push Docker images to ACR
        run: |
          docker push ${{ secrets.ACR_NAME }}.azurecr.io/my-api:${{ github.sha }}
          docker push ${{ secrets.ACR_NAME }}.azurecr.io/my-react-app:${{ github.sha }}

  deploy-dev:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Set Variables
        id: vars
        run: |
          echo "api_image=${{ secrets.ACR_NAME }}.azurecr.io/my-api:${{ github.sha }}" >> "$GITHUB_ENV"
          echo "react_image=${{ secrets.ACR_NAME }}.azurecr.io/my-react-app:${{ github.sha }}" >> "$GITHUB_ENV"

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Deploy PostgreSQL to Azure Container Instances (ACI) for DEV
      - name: Deploy PostgreSQL to Azure Container Instances (ACI)
        run: |
          az container create \
            --resource-group my-resource-group \
            --name my-postgres-dev \
            --image postgres:latest \
            --os-type Linux \
            --cpu 1 \
            --memory 1.5 \
            --environment-variables POSTGRES_USER=${{ secrets.DATABASE_USERNAME }} POSTGRES_PASSWORD=${{ secrets.DATABASE_PASSWORD }} POSTGRES_DB=${{ secrets.DATABASE_NAME }} \
            --ports 5432 \
            --dns-name-label my-postgres-dev \
            --restart-policy Always
        id: postgres

      - name: Get Postgres IP
        id: postgres_ip
        run: |
          IP=$(az container show --name my-postgres-dev --resource-group my-resource-group --query ipAddress.ip --output tsv)
          echo "ip=$IP" >> "$GITHUB_OUTPUT"
      # Deploy API to Azure Container Apps (DEV)
      - name: Deploy API to Azure Container Apps (DEV)
        run: |
          az containerapp up \
            --name my-api-dev \
            --resource-group my-resource-group \
            --image $api_image \
            --target-port 3000 \
            --ingress 'external' \
            --environment my-environment \
            --registry-username ${{ secrets.ACR_USERNAME }} \
            --registry-password ${{ secrets.ACR_PASSWORD }} \
            --env-vars DATABASE_HOST=${{ steps.postgres_ip.outputs.ip }} \
            DATABASE_PORT=${{ secrets.DATABASE_PORT }} \
            DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }} \
            DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
            DATABASE_NAME=${{ secrets.DATABASE_NAME }}
            
      # Deploy React App to Azure Container Apps (DEV)
      - name: Deploy React App to Azure Container Apps (DEV)
        run: |
          az containerapp up \
            --name my-react-app-dev \
            --resource-group my-resource-group \
            --image $react_image \
            --ingress 'external' \
            --target-port 3000 \
            --environment my-environment \
            --registry-username ${{ secrets.ACR_USERNAME }} \
            --registry-password ${{ secrets.ACR_PASSWORD }}